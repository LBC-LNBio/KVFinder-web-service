* KVFinder web service

** Local install

KVFinder-web-service has three modules: web, queue and worker. Each one runs in single docker containers, but they are combined into a docker-compose configuration file.

To run this web service in linux distributions it is necessary to install docker-compose and its dependencies. In Debian/Ubuntu and derivatives, execute:

#+begin_example
$ sudo apt install docker-compose
#+end_example

After the docker-compose installation and copy/clone of this repository, you can execute the command bellow from the repository's root path.

#+begin_src
$ docker-compose up
#+end_src

or

#+begin_src
$ docker-compose up -d
#+end_src

to execute the service in background.

To stop the web service execution run the command:

#+begin_src
$ docker-compose down
#+end_src

or with the flag /--volumes/ to destroy files and directories where the parkfinder saves processed jobs.

#+begin_src
$ docker-compose down --volumes
#+end_src

The web service uses port 8081 by default. If the local installation was successfully the link bellow should present a text message like: "KVFinder Web". You can use a browser to test.

[[http://localhost:8081][http://localhost:8081]]

Job queue information can be

[[http://localhost:8023/info][http://localhost:8023/info]]

** API

*** Create a job

*POST /create*

- URL: [[http://localthost:8081/create][http://localhost:8081/create]]
- Method: POST
- Media type: 'application/json'

Example request:

#+begin_src json
{
  "pdb": [
    "MODEL        1\n",
    "ATOM      1  N   GLU E  13      -6.693 -15.642 -14.858  1.00100.00           N  \n",
    (...)
   "END\n"
  ],
  "settings": {
    "modes": {
      "whole_protein_mode": true,
      "box_mode": false,
      "resolution_mode": "Low",
      "surface_mode": true,
      "kvp_mode": false,
      "ligand_mode": false
    },
    "step_size": {
      "step_size": 0.0
    },
    "probes": {
      "probe_in": 1.4,
      "probe_out": 4.0
    },
    "cutoffs": {
      "volume_cutoff": 5.0,
      "ligand_cutoff": 5.0,
      "removal_distance": 0.0
    },
    "visiblebox": {
      "p1": { "x": 0.0, "y": 0.0, "z": 0.0 },
      "p2": { "x": 0.0, "y": 0.0, "z": 0.0 },
      "p3": { "x": 0.0, "y": 0.0, "z": 0.0 },
      "p4": { "x": 0.0, "y": 0.0, "z": 0.0 }
    },
    "internalbox": {
      "p1": { "x": -4.0, "y": -4.0, "z": -4.0 },
      "p2": { "x": 4.0, "y": -4.0, "z": -4.0 },
      "p3": { "x": -4.0, "y": 4.0, "z": -4.0 },
      "p4": { "x": -4.0, "y": -4.0, "z": 4.0 }
    }
  }
}
#+end_src


*** Request a result

*GET /:id*

- URL: [[http://localhost:8081/:id][http://localhost:8081/:id]]
- Method: GET


Where *:id*  is the job id received from the server as submission response.

Exemplo de json de resposta após o /job/ ter sido executado com sucesso

Example of response obtained for a job with status "completed".

#+begin_src json
{
  "id": "17275205978013541183",
  "status": "completed",
  "output": {
    "pdb_kv": "ATOM      1  HS  KAA   259     -15.000 -10.200   0.000  1.00  0.00\nATOM      2(...)",
    "report": "# TOML results file for parKVFinder software\n\ntitle = \"parKVFinder results f(...)",
    "log": "==========\tSTART\tRUN\t=========\n\nDate and time: Fri Apr 16 11:40:06 2021\n\nRu(...)",
  },
  "created_at": "2021-04-16T11:40:02.514045822Z",
  "started_at": "2021-04-16T11:40:06.671064517Z",
  "ended_at": "2021-04-16T11:40:17.701426882Z",
  "expires_after": "1day"
}
#+end_src


# ** Cliente integrado ao PyMOL: PyMOL KVFinder-web Tools

# O cliente PyMOL KVFinder-web Tools está disponível em `client/PyMOL-KVFinder-web-Tools`.

# Para mais informações, use o guia disponível [aqui](https://github.com/jvsguerra/kvfinder-ws/blob/master/client/PyMOL-KVFinder-web-tools/README.md)


# ** Configurações



** Notes

1. After source code modifications or update the containers must be rebuild.

#+begin_src
$ docker-compose up --build
#+end_src

2. To increase the number workers and process more than 1 job simultaneously.

#+begin_src
$ docker-compose up --scale kv-worker=2
#+end_src

# Por ainda ser um sistema em fase de testes o tempo de /timeout/ de um /job/ está em *12 minutos* e o tempo que esse /job/ permanece disponível ("/expires_after/") está em *6 minutos*. Em produção o /job/ deverá permanecer disponível por algo como *1 dia*.
